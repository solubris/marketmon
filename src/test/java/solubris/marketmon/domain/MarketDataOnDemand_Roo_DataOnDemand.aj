// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package solubris.marketmon.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import solubris.marketmon.domain.Event;
import solubris.marketmon.domain.EventDataOnDemand;
import solubris.marketmon.domain.Market;
import solubris.marketmon.domain.MarketDataOnDemand;
import solubris.marketmon.domain.MarketDescription;
import solubris.marketmon.domain.MarketState;
import solubris.marketmon.domain.types.BettingType;
import solubris.marketmon.domain.types.MarketStatus;

privileged aspect MarketDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MarketDataOnDemand: @Component;
    
    private Random MarketDataOnDemand.rnd = new SecureRandom();
    
    private List<Market> MarketDataOnDemand.data;
    
    @Autowired
    private EventDataOnDemand MarketDataOnDemand.eventDataOnDemand;
    
    public void MarketDataOnDemand.setState(Market obj, int index) {
        MarketState embeddedClass = new MarketState();
        setStateTotalMatched(embeddedClass, index);
        setStateTotalAvailable(embeddedClass, index);
        setStateVersion(embeddedClass, index);
        setStateNumberOfWinners(embeddedClass, index);
        setStateNumberOfRunners(embeddedClass, index);
        setStateNumberOfActiveRunners(embeddedClass, index);
        setStateBetDelay(embeddedClass, index);
        setStateRunnersVoidable(embeddedClass, index);
        setStateBspReconciled(embeddedClass, index);
        setStateComplete(embeddedClass, index);
        setStateInplay(embeddedClass, index);
        setStateCrossMatching(embeddedClass, index);
        setStateStatus(embeddedClass, index);
        obj.setState(embeddedClass);
    }
    
    public void MarketDataOnDemand.setStateTotalMatched(MarketState obj, int index) {
        Double totalMatched = new Integer(index).doubleValue();
        obj.setTotalMatched(totalMatched);
    }
    
    public void MarketDataOnDemand.setStateTotalAvailable(MarketState obj, int index) {
        Double totalAvailable = new Integer(index).doubleValue();
        obj.setTotalAvailable(totalAvailable);
    }
    
    public void MarketDataOnDemand.setStateVersion(MarketState obj, int index) {
        Long version = new Integer(index).longValue();
        obj.setVersion(version);
    }
    
    public void MarketDataOnDemand.setStateNumberOfWinners(MarketState obj, int index) {
        Short numberOfWinners = new Integer(index).shortValue();
        obj.setNumberOfWinners(numberOfWinners);
    }
    
    public void MarketDataOnDemand.setStateNumberOfRunners(MarketState obj, int index) {
        Short numberOfRunners = new Integer(index).shortValue();
        obj.setNumberOfRunners(numberOfRunners);
    }
    
    public void MarketDataOnDemand.setStateNumberOfActiveRunners(MarketState obj, int index) {
        Short numberOfActiveRunners = new Integer(index).shortValue();
        obj.setNumberOfActiveRunners(numberOfActiveRunners);
    }
    
    public void MarketDataOnDemand.setStateBetDelay(MarketState obj, int index) {
        Short betDelay = new Integer(index).shortValue();
        obj.setBetDelay(betDelay);
    }
    
    public void MarketDataOnDemand.setStateRunnersVoidable(MarketState obj, int index) {
        Boolean runnersVoidable = Boolean.TRUE;
        obj.setRunnersVoidable(runnersVoidable);
    }
    
    public void MarketDataOnDemand.setStateBspReconciled(MarketState obj, int index) {
        Boolean bspReconciled = Boolean.TRUE;
        obj.setBspReconciled(bspReconciled);
    }
    
    public void MarketDataOnDemand.setStateComplete(MarketState obj, int index) {
        Boolean complete = Boolean.TRUE;
        obj.setComplete(complete);
    }
    
    public void MarketDataOnDemand.setStateInplay(MarketState obj, int index) {
        Boolean inplay = Boolean.TRUE;
        obj.setInplay(inplay);
    }
    
    public void MarketDataOnDemand.setStateCrossMatching(MarketState obj, int index) {
        Boolean crossMatching = Boolean.TRUE;
        obj.setCrossMatching(crossMatching);
    }
    
    public void MarketDataOnDemand.setStateStatus(MarketState obj, int index) {
        MarketStatus status = MarketStatus.class.getEnumConstants()[0];
        obj.setStatus(status);
    }
    
    public void MarketDataOnDemand.setDescription(Market obj, int index) {
        MarketDescription embeddedClass = new MarketDescription();
        setDescriptionMarketName(embeddedClass, index);
        setDescriptionTurnInPlayEnabled(embeddedClass, index);
        setDescriptionPersistenceEnabled(embeddedClass, index);
        setDescriptionBspMarket(embeddedClass, index);
        setDescriptionSuspendTime(embeddedClass, index);
        setDescriptionMarketTime(embeddedClass, index);
        setDescriptionBettingType(embeddedClass, index);
        obj.setDescription(embeddedClass);
    }
    
    public void MarketDataOnDemand.setDescriptionMarketName(MarketDescription obj, int index) {
        String marketName = "marketName_" + index;
        obj.setMarketName(marketName);
    }
    
    public void MarketDataOnDemand.setDescriptionTurnInPlayEnabled(MarketDescription obj, int index) {
        Boolean turnInPlayEnabled = Boolean.TRUE;
        obj.setTurnInPlayEnabled(turnInPlayEnabled);
    }
    
    public void MarketDataOnDemand.setDescriptionPersistenceEnabled(MarketDescription obj, int index) {
        Boolean persistenceEnabled = Boolean.TRUE;
        obj.setPersistenceEnabled(persistenceEnabled);
    }
    
    public void MarketDataOnDemand.setDescriptionBspMarket(MarketDescription obj, int index) {
        Boolean bspMarket = Boolean.TRUE;
        obj.setBspMarket(bspMarket);
    }
    
    public void MarketDataOnDemand.setDescriptionSuspendTime(MarketDescription obj, int index) {
        Date suspendTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setSuspendTime(suspendTime);
    }
    
    public void MarketDataOnDemand.setDescriptionMarketTime(MarketDescription obj, int index) {
        Date marketTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setMarketTime(marketTime);
    }
    
    public void MarketDataOnDemand.setDescriptionBettingType(MarketDescription obj, int index) {
        BettingType bettingType = BettingType.class.getEnumConstants()[0];
        obj.setBettingType(bettingType);
    }
    
    public void MarketDataOnDemand.setEvent(Market obj, int index) {
        Event event = eventDataOnDemand.getRandomEvent();
        obj.setEvent(event);
    }
    
    public void MarketDataOnDemand.setExchangeId(Market obj, int index) {
        Short exchangeId = new Integer(index).shortValue();
        obj.setExchangeId(exchangeId);
    }
    
    public void MarketDataOnDemand.setMarketDataDelayed(Market obj, int index) {
        Boolean marketDataDelayed = Boolean.TRUE;
        obj.setMarketDataDelayed(marketDataDelayed);
    }
    
    public Market MarketDataOnDemand.getSpecificMarket(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Market obj = data.get(index);
        Long id = obj.getId();
        return Market.findMarket(id);
    }
    
    public Market MarketDataOnDemand.getRandomMarket() {
        init();
        Market obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Market.findMarket(id);
    }
    
    public boolean MarketDataOnDemand.modifyMarket(Market obj) {
        return false;
    }
    
    public void MarketDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Market.findMarketEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Market' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Market>();
        for (int i = 0; i < 10; i++) {
            Market obj = getNewTransientMarket(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
