// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package solubris.marketmon.domain;

import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import solubris.marketmon.domain.Runner;
import solubris.marketmon.domain.RunnerIntegrationTest;

privileged aspect RunnerIntegrationTest_Roo_IntegrationTest {
    
    declare @type: RunnerIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: RunnerIntegrationTest: @Transactional;
    
    @Test
    public void RunnerIntegrationTest.testCountRunners() {
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", dod.getRandomRunner());
        long count = Runner.countRunners();
        Assert.assertTrue("Counter for 'Runner' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void RunnerIntegrationTest.testFindRunner() {
        Runner obj = dod.getRandomRunner();
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", obj);
        Long id = obj.getSelectionId();
        Assert.assertNotNull("Data on demand for 'Runner' failed to provide an identifier", id);
        obj = Runner.findRunner(id);
        Assert.assertNotNull("Find method for 'Runner' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Runner' returned the incorrect identifier", id, obj.getSelectionId());
    }
    
    @Test
    public void RunnerIntegrationTest.testFindAllRunners() {
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", dod.getRandomRunner());
        long count = Runner.countRunners();
        Assert.assertTrue("Too expensive to perform a find all test for 'Runner', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Runner> result = Runner.findAllRunners();
        Assert.assertNotNull("Find all method for 'Runner' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Runner' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void RunnerIntegrationTest.testFindRunnerEntries() {
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", dod.getRandomRunner());
        long count = Runner.countRunners();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Runner> result = Runner.findRunnerEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Runner' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Runner' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void RunnerIntegrationTest.testFlush() {
        Runner obj = dod.getRandomRunner();
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", obj);
        Long id = obj.getSelectionId();
        Assert.assertNotNull("Data on demand for 'Runner' failed to provide an identifier", id);
        obj = Runner.findRunner(id);
        Assert.assertNotNull("Find method for 'Runner' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifyRunner(obj);
        Short currentVersion = obj.getVersion();
        obj.flush();
        Assert.assertTrue("Version for 'Runner' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void RunnerIntegrationTest.testMergeUpdate() {
        Runner obj = dod.getRandomRunner();
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", obj);
        Long id = obj.getSelectionId();
        Assert.assertNotNull("Data on demand for 'Runner' failed to provide an identifier", id);
        obj = Runner.findRunner(id);
        boolean modified =  dod.modifyRunner(obj);
        Short currentVersion = obj.getVersion();
        Runner merged = obj.merge();
        obj.flush();
        Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getSelectionId(), id);
        Assert.assertTrue("Version for 'Runner' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void RunnerIntegrationTest.testRemove() {
        Runner obj = dod.getRandomRunner();
        Assert.assertNotNull("Data on demand for 'Runner' failed to initialize correctly", obj);
        Long id = obj.getSelectionId();
        Assert.assertNotNull("Data on demand for 'Runner' failed to provide an identifier", id);
        obj = Runner.findRunner(id);
        obj.remove();
        obj.flush();
        Assert.assertNull("Failed to remove 'Runner' with identifier '" + id + "'", Runner.findRunner(id));
    }
    
}
